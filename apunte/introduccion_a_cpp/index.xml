<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introducción a C++ on</title><link>/apunte/introduccion_a_cpp/</link><description>Recent content in Introducción a C++ on</description><generator>Hugo -- gohugo.io</generator><atom:link href="/apunte/introduccion_a_cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>Compilación y editores de texto</title><link>/apunte/introduccion_a_cpp/compilacion_y_editores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/introduccion_a_cpp/compilacion_y_editores/</guid><description>Prerequisitos # Para este artículo, asumimos que posees conocimiento básico de uso de terminales. No podemos cubrir eso acá, pues puede variar mucho dependiendo de tu sistema. Si no sabes usar un terminal, ¡no te preocupes! Es más sencillo de lo que puede parecer al inicio. Cualquier tutorial básico de internet te servirá para lo que usaremos.
Compilación # Como C++ es un lenguaje compilado (al contrario que, por ejemplo, Python, que es interpretado), necesitamos descargar un compilador para poder crear un archivo ejecutable a partir de nuestro código fuente.</description></item><item><title>Sintaxis, variables, tipos y ciclos</title><link>/apunte/introduccion_a_cpp/sintaxis_variables_tipos_ciclos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/introduccion_a_cpp/sintaxis_variables_tipos_ciclos/</guid><description>Ahora que tienes las herramientas para programar, podemos empezar a entender las partes de un programa en C++. En esta sección se explican todos los conceptos previos necesarios para empezar a resolver problemas de programación, sientete libre de omitir esta parte si sabes como funciona la programación o has tenido experiencia programando antes.
Sintaxis # Tal como en otros lenguajes de programación (como c, kotlin o python) vamos a identificar las instrucciones de nuestro código a partir de la manera en que están agrupadas las líneas de código.</description></item><item><title>Funciones</title><link>/apunte/introduccion_a_cpp/funciones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/introduccion_a_cpp/funciones/</guid><description>Las funciones permiten organizar de mejor manera el código, haciendolo más legible y limpio, lo que facilita el debugging, además algunos algoritmos son más fáciles al pensarlos en funciones como el backtracking.
Creando funciones # Para crear una función se escribe su nombre seguido por párentesis, después se abren llaves {} donde se define el cuerpo de la función:
void unaFuncion() { // Cuerpo de la función cout &amp;lt;&amp;lt; &amp;#34;Se llamó esta función!</description></item><item><title>Vectores</title><link>/apunte/introduccion_a_cpp/vectores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/introduccion_a_cpp/vectores/</guid><description>Vectores # Hasta ahora solo podemos guardar una cantidad constante de variables y todas de forma manual, sin embargo, con frecuencia necesitaremos una cantidad de variables que depende del input o quizás simplemente tantas variables que nos sea inconveniente crearlas a mano. Vamos a ver como usar vectores.
Los vectores son una estructura que nos permite guardar una cantidad cualquiera de variables (tomando en cuenta el límite de memoria de la máquina).</description></item><item><title>Operadores de bits</title><link>/apunte/introduccion_a_cpp/operadores_de_bits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/introduccion_a_cpp/operadores_de_bits/</guid><description>Números binarios # Probablemente te sea familiar el concepto de los números binarios, son números que están compuestos solamente por unos y ceros, cada dígito es llamado un bit, y dependiendo de la posición de este dígito es una distinta potencia de 2:
Hay bastantes problemas que requieren que revises los bits de un número y trabajes sobre ellos y esto es bastante fácil si sabes como hacerlo:
int number; cin&amp;gt;&amp;gt;number; vector&amp;lt;int&amp;gt; bits; while (number !</description></item></channel></rss>