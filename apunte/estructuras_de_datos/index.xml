<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Estructuras de datos on</title><link>/apunte/estructuras_de_datos/</link><description>Recent content in Estructuras de datos on</description><generator>Hugo -- gohugo.io</generator><atom:link href="/apunte/estructuras_de_datos/index.xml" rel="self" type="application/rss+xml"/><item><title>Union-find</title><link>/apunte/estructuras_de_datos/union_find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/estructuras_de_datos/union_find/</guid><description>Union Find # El Union Find es una estructura que guarda una lista de elementos como subconjuntos disjuntos y nos permite consultar en que conjunto está cada elemento y unir dos subconjuntos en tiempo constante (aproximadamente).
Para implementar esto cada subconjunto tiene un &amp;ldquo;representante&amp;rdquo;. Inicialmente todos los elementos van a estar en su propio subconjunto solos y su representante va a ser él mismo.
// n representa la cantidad de elementos que tenemos int n; // Aquí guardaremos los representantes vector&amp;lt;int&amp;gt; p(n); // Aquí guardaremos su tamaño vector&amp;lt;int&amp;gt; size(n,1); // Aquí asignamos cada elemento como su propio representante for (int i=0;i&amp;lt;n;i++){ p[i] = i; } Ahora, para unir dos conjuntos tenemos que cambiar el representante de uno de los elementos para moverlo al otro conjunto.</description></item></channel></rss>