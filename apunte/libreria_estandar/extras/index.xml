<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extras on</title><link>/apunte/libreria_estandar/extras/</link><description>Recent content in Extras on</description><generator>Hugo -- gohugo.io</generator><atom:link href="/apunte/libreria_estandar/extras/index.xml" rel="self" type="application/rss+xml"/><item><title>Permutaciones de un vector</title><link>/apunte/libreria_estandar/extras/permutaciones_de_un_arreglo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apunte/libreria_estandar/extras/permutaciones_de_un_arreglo/</guid><description>Código # A veces necesitamos iterar por todas las permutaciones de un vector A. Una forma típica de programar algoritmos de fuerza bruta como este es con recursión (backtracking), pero con la función next_permutation de la librería estándar podemos escribirlo más simple:
vector &amp;lt;Tipo&amp;gt; A; // ...imaginemos que A tiene elementos sort(A.begin(), A.end()); do{ // procesamos la permutación actual } while(next_permutation(A.begin(), A.end())); // avanzamos a la siguiente permutación Explicación # Diremos que una permutación es menor o mayor que otra si es lexicográficamente menor o mayor, respectivamente.</description></item></channel></rss>