<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>La STL on</title><link>/docs/stl/</link><description>Recent content in La STL on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="/docs/stl/index.xml" rel="self" type="application/rss+xml"/><item><title>Chars y Strings</title><link>/docs/stl/strings/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/stl/strings/</guid><description>Chars Los caracteres en C++ en realidad son guardados como números dentro del computador, estos números son interpretados como un carácter al ocupar el programa pero son números por debajo lo cual nos permite hacer algunos usos interesantes de estos.
La correspondencia entre el número y el carácter que representa está dada por el código ASCII, no es necesario que sepan de memoria la correspondencia entre números y símbolos, solo saber como funciona es suficiente.</description></item><item><title>Pair y Tuple</title><link>/docs/stl/pair-tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/stl/pair-tuple/</guid><description>Hasta ahora, solo hemos podido guardar 1 solo valor en los vectores, queues, stacks, etc. Esto puede no llegar a ser un mayor problema, ya que siempre se pueden crear múltiples vectores, pero, y si queremos ordenar un vector, pero aún así conocer la posición inicial que tenian los valores?, necesitamos una forma de mantener el valor y el índice juntos, y es aquí donde los pair entran al juego.</description></item><item><title>Sort</title><link>/docs/stl/sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/stl/sort/</guid><description>Ordenar Con frecuencia en problemas de programación nos será de utilidad tener los elementos ordenados y si has visto antes el problema de ordenar un arreglo sabrás que se puede resolver con una complejidad de $O(nlogn)$, siendo $n$ el tamaño del arreglo, pero esto no es simple de programar. Por suerte, C++ tiene implementada la función sort que nos permite ordenar distintas estructuras con esta complejidad.
Para usar sort solo necesitamos entregar dos punteros a donde parte y termina el espacio, para un arreglo es:</description></item><item><title>Sets, Maps y Multisets</title><link>/docs/stl/setmap/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/stl/setmap/</guid><description>Set Quizás te suene una estructura llamada &amp;ldquo;árbol de búsqueda binaria&amp;rdquo;, sin entrar en detalles de su implementación esta estructura guarda un conjunto de elementos de forma ordenada y permite insertar, buscar y eliminar elementos con una complejidad de $O( \log(n) \cdot k )$ donde $n$ es el tamaño del conjunto y $k$ es la complejidad de comparar dos elementos. Ahora, la parte complicada de esto es la implementación pero C++ tiene la estructura set que está implementada como uno de estos árboles lo cual nos da todos los beneficios en términos de complejidad sin tener que implementar todo desde cero, pero usar esta estructura es bastante distinto a usar un vector así que es necesario aprender a usarla.</description></item><item><title>Stack y Queue</title><link>/docs/stl/stackqueue/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/stl/stackqueue/</guid><description>En esta sección vamos a ver un par de estructuras que nos permiten organizar nuestros datos de una forma muy específica, las cuales pueden no parecer muy útiles en un principio pero aparecen frecuentemente en los distintos algoritmos que se verán más adelante así que es importante entenderlas, saber como funcionan y como usarlas.
Stack El stack es una estructura LIFO (Last In, First Out), lo que significa que cuando sacamos un elemento de esta vamos a obtener el último elemento que pusimos en él.</description></item><item><title>Priority Queue</title><link>/docs/stl/priority_queue/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>/docs/stl/priority_queue/</guid><description>Priority Queue La priority_queue es un contenedor de elementos que permite insertar y obtener el máximo elemento con complejidad $O( \log(n) \cdot k )$ donde $k$ es la complejidad de comparar dos elementos. Puede que esto suene como una estructura limitada que cumple una función muy específica, pero esto es algo que se ve repetido bastante en algoritmos y problemas.
Esta estructura internamente implementa un heap, no es necesaria entenderla a profundidad para usarla.</description></item></channel></rss>